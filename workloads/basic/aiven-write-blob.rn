const BLOB_SIZE = latte::param!("blob_size", 1024);
const ROW_COUNT = latte::param!("row_count", 300000);

const INSERT_PREPARED_STM = "insert";

const KEYSPACE = "aiven";
const TABLE = "blobtb";

pub async fn schema(db) {
    db.execute(`CREATE KEYSPACE IF NOT EXISTS ${KEYSPACE} \
                    WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }`).await?;
    db.execute(`DROP TABLE IF EXISTS ${KEYSPACE}.${TABLE}`).await?;
    db.execute(`CREATE TABLE ${KEYSPACE}.${TABLE}(id bigint PRIMARY KEY, data BLOB)`).await?;
}

pub async fn erase(db) {
    db.execute(`TRUNCATE TABLE ${KEYSPACE}.${TABLE}`).await
}

pub async fn prepare(db) {
    db.prepare(INSERT_PREPARED_STM, `INSERT INTO ${KEYSPACE}.${TABLE}(id, data) VALUES (:id, :data)`).await?;
    db.load_cycle_count = ROW_COUNT;
}

pub async fn load(ctx, i) {
  ctx.execute_prepared(INSERT_PREPARED_STM, [i, latte::blob(i, BLOB_SIZE)]).await?
}

pub async fn run(db, i) {
    db.execute_prepared(INSERT_PREPARED_STM, [i, latte::blob(i, BLOB_SIZE)]).await?
}
